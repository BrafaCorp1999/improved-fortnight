name: Build iOS IPA

on: [push]

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Paso 1: Configurar Flutter
    - name: Set up Flutter
      run: |
        git clone https://github.com/flutter/flutter.git -b stable --depth 1 ~/flutter
        echo "$HOME/flutter/bin" >> $GITHUB_PATH
        ~/flutter/bin/flutter --version
        ~/flutter/bin/flutter precache --ios
        
    # Paso 2: Configurar Xcode
    - name: Set up Xcode
      run: |
        sudo xcode-select --switch /Applications/Xcode.app
        sudo xcodebuild -runFirstLaunch
        
    # Paso 3: Regenerar proyecto iOS
    - name: Recreate iOS project
      run: |
        ~/flutter/bin/flutter clean
        rm -rf ios .ios
        ~/flutter/bin/flutter create --platforms ios --project-name wink .
        
    # Paso 4: Configurar Podfile correctamente
    - name: Configure Podfile and workspace
      run: |
        cd ios
        # Crear Podfile optimizado para Firebase
        cat <<EOF > Podfile
        platform :ios, '12.0'
        use_frameworks!
        use_modular_headers!
        
        target 'Runner' do
          pod 'FirebaseFirestore', :modular_headers => true
          pod 'FirebaseAuth', :modular_headers => true
          pod 'FirebaseCore', :modular_headers => true
          pod 'FirebaseStorage', :modular_headers => true
          pod 'Flutter', :modular_headers => false
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
                # Solución específica para cloud_firestore
                if target.name == 'FirebaseFirestore'
                  config.build_settings['OTHER_CFLAGS'] = ['-DFIRFirestore_VERSION=10.15.0']
                end
              end
            end
          end
        end
        EOF
        
        # Ejecutar pod install con verbose
        pod install --repo-update --verbose
        
        # Configurar workspace manualmente
        /usr/libexec/PlistBuddy -c "Add :ALWAYS_SEARCH_USER_PATHS NO" Runner.xcodeproj/project.pbxproj
        /usr/libexec/PlistBuddy -c "Add :CLANG_ENABLE_MODULES YES" Runner.xcodeproj/project.pbxproj
        
    # Paso 5: Construir IPA directamente con xcodebuild
    - name: Build IPA with xcodebuild
      run: |
        cd ios
        xcodebuild \
          -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          clean build
        
    # Paso 6: Empaquetar IPA manualmente
    - name: Package IPA
      run: |
        mkdir -p build/ios/ipa/Payload
        cp -r ios/build/Release-iphoneos/Runner.app build/ios/ipa/Payload
        cd build/ios/ipa
        zip -r Runner.ipa Payload
        
    # Paso 7: Subir artefacto
    - uses: actions/upload-artifact@v4
      with:
        name: app-ipa
        path: build/ios/ipa/Runner.ipa
